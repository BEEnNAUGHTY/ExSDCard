#!/sbin/sh
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/adb/magisk

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "*******************************"
  ui_print " Please install Magisk v15.0+! "
  ui_print "*******************************"
  exit 1
}

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP=$3

mount /data 2>/dev/null
if mount | grep -q /data; then
    ui_print "- /data is now mounted"
else
    ui_print ""
	ui_print "/data cannot be mounted, please mount it manually"
	ui_print "The install script cannot continue !"
fi

##########################################################################################
# Tasks before module setup
##########################################################################################
ui_print ""
ui_print ""
ui_print "----------------------------------------------"
ui_print "Tasks before module setup are needed.."
ui_print "Install script by Rom"
ui_print ""
ui_print ""

TMPFOLDER=/data/ExSDCard
INTERNALPATH=/data/media/0
XMLFILE=ExSDCard.config.txt


mkdir -p $TMPFOLDER/system/etc/permissions/
mkdir -p $INSTALLER/system/etc/permissions/

ui_print "Create the working folder and sub-folders"

ui_print "Here we go !!! :)"
ui_print ""


cd $INTERNALPATH/
# Check if V1 or V2 is enabled in ExSDCard.config.txt
if [ -e "$XMLFILE" ]; then
	if grep -q "yes" $XMLFILE | head -2 && grep -q "yes" ExSDCard.config.txt | head -3
	then
		ui_print "original.platform.1.xml and original.platform.2.xml files"
		ui_print "can only help a minority of users who need some special(s)"
		ui_print "permissions, so it's useless to put the two values to "yes""
		ui_print "in the config file, just one (if needed) is necessary."
	sed -i '2s/yes/no/' $XMLFILE
	sed -i '3s/yes/no/' $XMLFILE
	fi
	
	
		if grep -q "yes" $XMLFILE | head -2
		then
			ui_print "original.platform.1.xml as been enabled"
			ui_print "in ExSDCard.config.txt file"
			ui_print ""
			ui_print "..."
			ui_print ""
			ui_print "original.platform.1.xml was found"
			ui_print "on internal storage"
			unzip -o "$ZIP" -d original.platform.1.xml -d $TMPFOLDER/system/etc/permissions/ >&2
			mv $TMPFOLDER/system/etc/permissions/original.platform.1.xml $INSTALLER/system/etc/permissions/platform.xml
			rm -f $TMPFOLDER/system/etc/permissions/platform.xml
			ui_print "original.platform.1.xml was added to ZIP"
			ui_print "as platform.xml"
			ui_print ""
			ui_print ""
	else
		ui_print "original.platform.1.xml was not found"
		ui_print "on internal storage"
		ui_print ""
		ui_print "Install scrip continue.."
		ui_print ""
	fi
		if grep -q "yes" ExSDCard.config.txt | head -3
		then
			ui_print "original.platform.2.xml was found"
			ui_print "on internal storage"
			unzip -o "$ZIP" -d original.platform.2.xml -d $TMPFOLDER/system/etc/permissions/ >&2
			mv $TMPFOLDER/system/etc/permissions/original.platform.2.xml $INSTALLER/system/etc/permissions/platform.xml
			rm -f $TMPFOLDER/system/etc/permissions/platform.xml
	else
		ui_print "original.platform.2.xml was not found"
		ui_print "on internal storage"
		ui_print ""
		ui_print "install scrip continue.."
		ui_print ""
	fi
else
	ui_print "ExSDCard.config.txt result:"
	ui_print "=> Not found on internal storage"
	ui_print ""
fi

# Extract Oreo config files
unzip -o "$ZIP" privapp-permissions-com.package.name.xml -d $TMPFOLDER/ >&2
ui_print "Copying default XML file perm from"
ui_print "given flashable ZIP in the work folder"
ui_print "(just in case of..)"
ui_print ""

cd $INTERNALPATH/
if ls -al | grep -q "ExSDCard.O."
then
	ui_print ""
	ui_print "Work in progress..."
	ui_print "One or more ExSDCard.O.*.applist.txt files"
	ui_print "as been found"
	ui_print ""
	NAMES=$(awk '{ print }' ExSDCard.O.*.applist.txt)
			printf '%s\n' "$NAMES" | while IFS= read -r line
			do
			sed "s/com.package.name/$line/" < $TMPFOLDER/privapp-permissions-com.package.name.xml >  $TMPFOLDER/system/etc/permissions/privapp-permissions-$line.xml
		
		cd $TMPFOLDER/system/etc/permissions/
		cp -af ./* $INSTALLER/system/etc/permissions/
		ui_print "All created XML files added into $INSTALLER/system/etc/permissions/"
		ui-print "End of tasks for the MOD !"
		ui-print ""
	done
else
	ui_print "!!---------------------------------!!"
	ui_print "No applist.xml file(s) has been found.."
	ui_print ""
	ui_print "If you want to have an XML file "
	ui_print "permission for Oreo running under Magisk"
	ui_print "so create a TXT file called"
	ui_print "=> ExSDCard.O.*.applist.txt <="
	ui_print "replace * by any number"
	ui_print "and place them on root of your"
	ui_print "sdcard."
	ui_print "For additional support come on"
	ui_print "XDA/Telegram thread"
fi


##########################################################################################
# End of tasks for the MOD !
##########################################################################################
ui-print "Magisk tasks can beginning"
ui-print "All credit @topjhonwu"



# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility fuctions
. $MAGISKBIN/util_functions.sh

# We can't alter magisk image live, use alternative image if required
$BOOTMODE && IMG=/data/adb/magisk_merge.img
# Always mount under tmp
MOUNTPATH=$TMPDIR/magisk_img

# Preperation for flashable zips
get_outfd

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -o "$ZIP" module.prop config.sh original.platform.1.xml original.platform.2.xml privapp-permissions-com.package.name.xml 'common/*' -d $INSTALLER >&2

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

# Check the installed magisk version
MIN_VER=`grep_prop minMagisk $INSTALLER/module.prop`
[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

# Get the variable reqSizeM. Use your own method to determine reqSizeM if needed
request_zip_size_check "$ZIP"

# This function will mount $IMG to $MOUNTPATH, and resize the image based on $reqSizeM
mount_magisk_img

# Create mod paths
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH

# Extract files to system. Use your own method if needed
ui_print "- Extracting module files"
unzip -o "$ZIP" 'system/*' -d $MODPATH >&2

# Remove placeholder
rm -f $MODPATH/system/placeholder 2>/dev/null

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
$AUTOMOUNT && touch $MODPATH/auto_mount

# prop files
$PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/system.prop

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager
  mktouch /sbin/.core/img/$MODID/update
  cp -af $INSTALLER/module.prop /sbin/.core/img/$MODID/module.prop
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh

# service mode scripts
$LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/service.sh

# v1 and v2 tasks
cp -af $INSTALLER/original.platform.1.xml $MODPATH/original.platform.1.xml
cp -af $INSTALLER/original.platform.2.xml $MODPATH/original.platform.2.xml

# Default xml file perms
cp -af $INSTALLER/privapp-permissions-com.package.name.xml $MODPATH/privapp-permissions-com.package.name.xml

# XML perm files for Oreo
cp -af $INSTALLER/system/etc/permissions/* $MODPATH/system/etc/permissions/

# Copy the custom xml file perm in MODPATH if needed
if [ -e "$INSTALLER/system/etc/permissions/platform.xml" ]; then
	cp -af $INSTALLER/system/etc/permissions/platform.xml $MODPATH/system/etc/permissions/
fi

ui_print "- Setting permissions"
set_permissions


##########################################################################################
# Finalizing
##########################################################################################

# Unmount magisk image and shrink if possible
unmount_magisk_img

$BOOTMODE || recovery_cleanup
cd /data/ && rm -rf ./ExSDCard/

ui_print "----------------------------------------------"

ui_print "- Done"
ui_print "- This version of the module"
ui_print "- Works on Android 5.0 - 8.X.X"
exit 0
